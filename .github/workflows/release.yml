name: FreeBSD Build and Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *' # 每日自动检查版本

jobs:
  version_check:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.compare_versions.outputs.should_build }}
    steps:
      - name: Get upstream version
        id: get_upstream
        run: |
          # 解析上游仓库最新版本 [[0]](#__0)
          LATEST_URL=$(curl -sI https://github.com/Yuri-NagaSaki/ImageFlow/releases/latest | grep -i location: | awk -F'tag/' '{print $2}' | tr -d '\r')
          echo "UPSTREAM_VERSION=${LATEST_URL#v}" >> $GITHUB_ENV

      - name: Get current version
        id: get_current
        run: |
          # 解析当前仓库最新版本（无API调用） [[0]](#__0)
          if ! CURRENT_URL=$(curl -sI https://github.com/${{ github.repository }}/releases/latest | grep -i location:); then
            echo "CURRENT_VERSION=0.0.0" >> $GITHUB_ENV
            exit 0
          fi
          TAG_NAME=$(echo "$CURRENT_URL" | awk -F'tag/' '{print $2}' | tr -d '\r')
          echo "CURRENT_VERSION=${TAG_NAME#v}" >> $GITHUB_ENV

      - name: Compare versions
        id: compare_versions
        run: |
          # 使用版本排序比较 [[2]](#__2)
          HIGHER_VERSION=$(printf "$UPSTREAM_VERSION\n$CURRENT_VERSION" | sort -V | tail -n1)
          
          if [ "$HIGHER_VERSION" == "$UPSTREAM_VERSION" ] && [ "$UPSTREAM_VERSION" != "$CURRENT_VERSION" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug output
        run: |
          echo "Upstream Version: $UPSTREAM_VERSION"
          echo "Current Version: $CURRENT_VERSION"
          echo "Should Build: ${{ steps.compare_versions.outputs.should_build }}"


  build_freebsd:
    needs: version_check
    if: needs.version_check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Create virtual disk
        run: |
          qemu-img create -f qcow2 freebsd.qcow2 10G

      - name: Download FreeBSD ISO
        run: |
          wget https://download.freebsd.org/ftp/releases/ISO-IMAGES/13.2/FreeBSD-13.2-RELEASE-amd64-disc1.iso

      - name: Install FreeBSD (自动化安装)
        run: |
          expect <<EOF
          set timeout 600
          spawn qemu-system-x86_64 \
            -m 2048 \
            -smp 2 \
            -drive file=freebsd.qcow2,format=qcow2 \
            -cdrom FreeBSD-13.2-RELEASE-amd64-disc1.iso \
            -net user,hostfwd=tcp::2222-:22 \
            -net nic \
            -nographic

          expect "Welcome to FreeBSD"
          send "\r"
          expect "Install"
          send "\r"
          # 后续自动化应答脚本...
          EOF

      - name: Configure SSH access
        run: |
          sshpass -p 'root' ssh -o StrictHostKeyChecking=no root@localhost -p 2222 <<EOF
          pw usermod root -h 0 # 清空root密码
          echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config
          service sshd restart
          EOF

      - name: Build binary
        run: |
          ssh -o StrictHostKeyChecking=no root@localhost -p 2222 <<EOF
          pkg install -y go gmake
          git clone https://github.com/Yuri-NagaSaki/ImageFlow
          cd ImageFlow
          GOOS=freebsd GOARCH=${{ matrix.arch }} CGO_ENABLED=1 go build -o imageflow-freebsd-${{ matrix.arch }} main.go
          EOF

      - name: Download artifacts
        run: |
          scp -P 2222 root@localhost:ImageFlow/imageflow-freebsd-* .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: freebsd-${{ matrix.arch }}
          path: imageflow-freebsd-*
  build_linux:
    needs: version_check
    if: needs.version_check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Clone repo
        run: git clone https://github.com/Yuri-NagaSaki/ImageFlow

      - name: Build Linux binary
        working-directory: ImageFlow
        env:
          GOOS: linux
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -o imageflow-linux-${{ matrix.arch }} main.go

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}
          path: ImageFlow/imageflow-linux-*

  release:
    needs: [build_freebsd, build_linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.UPSTREAM_VERSION }}
          files: |
            linux-amd64/imageflow-linux-amd64
            linux-arm64/imageflow-linux-arm64
            freebsd-amd64/imageflow-freebsd-amd64
            freebsd-arm64/imageflow-freebsd-arm64
