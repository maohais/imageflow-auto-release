name: FreeBSD Build and Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *' # 每日自动检查版本

jobs:
  version_check:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.compare_versions.outputs.should_build }}
    steps:
      - name: Get upstream version
        id: get_upstream
        run: |
          LATEST_URL=$(curl -sI https://github.com/Yuri-NagaSaki/ImageFlow/releases/latest | grep -i location: | awk -F'tag/' '{print $2}' | tr -d '\r')
          echo "UPSTREAM_VERSION=${LATEST_URL#v}" >> $GITHUB_ENV
          echo "Upstream version: $UPSTREAM_VERSION"

      - name: Get current version
        id: get_current
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 处理无 release 的情况 [[5]](#__5)
          CURRENT_VERSION=$(gh api repos/${{ github.repository }}/releases/latest --jq '.tag_name' 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${CURRENT_VERSION#v}
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current version: $CURRENT_VERSION"

      - name: Compare versions
        id: compare_versions
        run: |
          # 使用语义化版本比较工具 [[5]](#__5)
          sudo apt-get install -y python3-semver
          comparison=$(python3 -c "import semver; print(semver.compare('$UPSTREAM_VERSION', '$CURRENT_VERSION'))")
          
          if [ "$comparison" -eq 1 ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug output
        run: |
          echo "Upstream: $UPSTREAM_VERSION"
          echo "Current: $CURRENT_VERSION"
          echo "Should build: ${{ steps.compare_versions.outputs.should_build }}"

  build_freebsd:
    needs: version_check
    if: needs.version_check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Setup FreeBSD VM
        uses: vmactions/freebsd-vm@v2
        with:
          version: '13.2' # FreeBSD 最新稳定版 [[0]](#__0)

      - name: Clone upstream repo
        run: git clone https://github.com/Yuri-NagaSaki/ImageFlow
        working-directory: /freebsd

      - name: Install build tools
        run: |
          pkg install -y go gmake clang12

      - name: Build binary
        working-directory: /freebsd/ImageFlow
        env:
          GOOS: freebsd
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1 # 强制启用 CGO [[3]](#__3)
        run: |
          output_name="imageflow-freebsd-${{ matrix.arch }}"
          go build -ldflags="-extld=clang" -o $output_name main.go

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: freebsd-${{ matrix.arch }}
          path: /freebsd/ImageFlow/imageflow-freebsd-*

  build_linux:
    needs: version_check
    if: needs.version_check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Clone repo
        run: git clone https://github.com/Yuri-NagaSaki/ImageFlow

      - name: Build Linux binary
        working-directory: ImageFlow
        env:
          GOOS: linux
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -o imageflow-linux-${{ matrix.arch }} main.go

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}
          path: ImageFlow/imageflow-linux-*

  release:
    needs: [build_freebsd, build_linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.UPSTREAM_VERSION }}
          files: |
            linux-amd64/imageflow-linux-amd64
            linux-arm64/imageflow-linux-arm64
            freebsd-amd64/imageflow-freebsd-amd64
            freebsd-arm64/imageflow-freebsd-arm64
